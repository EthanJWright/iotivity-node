{
  "_args": [
    [
      "iot-js-api@git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
      "/home/god/iotivity-node"
    ]
  ],
  "_from": "git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
  "_id": "iot-js-api@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/iot-js-api",
  "_phantomChildren": {
    "chokidar": "1.6.1",
    "detect-file": "0.1.0",
    "exists-stat": "1.0.0",
    "graceful-readlink": "1.0.1",
    "is-glob": "2.0.1",
    "js-reporters": "1.2.0",
    "micromatch": "2.3.11",
    "path-parse": "1.0.5",
    "resolve-dir": "0.1.1",
    "walk-sync": "0.3.1"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/01org/iot-js-api/2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc/package.json",
      "gitUrl": "git://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
      "httpsUrl": "git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
      "shortcut": "github:01org/iot-js-api#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
      "ssh": "git@github.com:01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
      "sshUrl": "git+ssh://git@github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
      "type": "github"
    },
    "name": "iot-js-api",
    "raw": "iot-js-api@git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
    "rawSpec": "git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
    "scope": null,
    "spec": "git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
    "type": "hosted"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
  "_shasum": "e8740954036852b1a7bc7500a35ff9ceccc8b9af",
  "_shrinkwrap": null,
  "_spec": "iot-js-api@git+https://github.com/01org/iot-js-api.git#2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
  "_where": "/home/god/iotivity-node",
  "bugs": {
    "url": "https://github.com/01org/iot-js-api/issues"
  },
  "dependencies": {
    "async": "^2.0.0-rc.4",
    "glob": "^7.0.3",
    "lodash": "^4.12.0",
    "qunitjs": "^2.0.0-rc1",
    "tmp": "0.0.28",
    "uuid": "^2.0.2"
  },
  "description": "OCF JS API specifications and test suites",
  "devDependencies": {
    "eslint-config-jquery": "0.1.2",
    "grunt": "^0.4.5",
    "grunt-eslint": "18.1.0",
    "load-grunt-config": "^0.17.2",
    "load-grunt-tasks": "^3.2.0"
  },
  "gitHead": "2895d5ed9d013a60c2e0ef077f42bb7f9a44d3fc",
  "homepage": "https://github.com/01org/iot-js-api#readme",
  "license": "Apache-2.0",
  "main": "scripts/index.js",
  "name": "iot-js-api",
  "optionalDependencies": {},
  "readme": "IoT Web APIs\n============\n\n<a name=\"introduction\"></a>\nIntroduction\n------------\nThe following JavaScript APIs are aimed for handling Internet of Things (IoT) applications on a given device:\n* [Open Connect Foundation (OCF) API](./ocf/README.md), exposing OCF Client and Server APIs\n  - [OCF API Test Suite](./ocf/test-suite/README.md)\n* [Bluetooth Smart API](./ble/README.md), exposing functionality for Bluetooth Peripheral mode\n* [Sensor API](./sensors/README.md), exposing sensor functionality supported on the device\n* [Board API](./board/README.md) providing low-level interfaces for I/O operations supported by the device board, so that applications could implement support for new types of sensors that are not supported by the Sensor API.\n\nSince implementations of these APIs exist also on constrained hardware, they might not support the latest [ECMAScript](http://www.ecma-international.org) versions. However, implementations should support at least [ECMAScript 5.1](http://www.ecma-international.org/ecma-262/5.1/). Examples are limited to ECMAScript 5.1 with the exception of using [Promises](#promise).\n\n<a name=\"structures\"></a>\nStructures\n----------\nThe following structures SHOULD be implemented in a constrained environment:\n  - [Promise](#promise)\n  - [Buffer](#buffer)\n  - [EventEmitter](#events)\n  - [Error](#error).\n\n<a name=\"promise\"></a>\n### Promises\nThe API uses [Promises](http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects). In constrained implementations, at least the following [`Promise`](http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects) methods MUST be implemented:\n- the [`Promise` constructor](http://www.ecma-international.org/ecma-262/6.0/#sec-promise-constructor)\n- the [`then(onFulfilled, onRejected)`](http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.then) method\n- the [`catch(onRejected)`](http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.catch) method.\n\n<a name=\"buffer\"></a>\n### Buffer\nBuffer is a [node.js API](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html)\nto read and write binary data accurately from JavaScript. This API supports a subset that will be expanded as needed:\n- constructor with a number argument `size`\n- the `length` property\n- the [`readUint8(offset)`](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buf_readuint8_offset_noassert) method\n- the [`writeUint8(value, offset)`](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buf_writeuint8_value_offset_noassert) method\n- the [`toString(encoding)`](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_buf_tostring_encoding_start_end) method.\n\n<a name=\"events\"></a>\n### Events\nThe API uses Node.js-style [events](https://nodejs.org/api/events.html#events_events). In constrained implementations, at least the following subset of the [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) interface MUST be supported:\n- the [`on(eventName, callback)`](https://nodejs.org/api/events.html#events_emitter_on_eventname_listener) method\n- the [`addListener(eventName, callback)`](https://nodejs.org/api/events.html#events_emitter_addlistener_eventname_listener) method, as an alias to the `on()` method\n- the [`removeListener(eventName, callback)`](https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener) method\n- the [`removeAllListeners`](https://nodejs.org/api/events.html#events_emitter_removealllisteners_eventname) method.\n\nNote that in order to make sure only one entity responds to a request, server request handling is done with registering callbacks at the serving objects (end points), rather than using events. Also, when subscribing to notifications requires options or filters, callbacks are used instead of events.\n\nIn the future events may be replaced by [`Observables`](https://github.com/tc39/proposal-observable) with signal semantics.\n\n<a name=\"error\"></a>\n### Error handling\nErrors are exposed via `onerror` events and `Promise` rejections, using augmented instances of a minimal subset of [`Error`](https://nodejs.org/api/errors.html#errors_class_error) objects with added properties.\n\nThe `Error` object MUST contain at least the following properties:\n\n| Property        | Type    | Optional | Default value | Represents |\n| ---             | ---     | ---      | ---           | ---     |\n| name            | string  | no       | \"Error\"       | The standard name of the error |\n| message         | string  | yes      | \"\"            | The error reason |\n\nThe following error names may be used by all APIs:\n- `SecurityError` for lack of permission or invalid access.\n- `NotSupportedError` for features not implemented.\n- `SyntaxError` for broken JavaScript and `eval` errors. Use it sparingly.\n- `TypeError` for invalid types, parameters, etc.\n- `RangeError` for parameters out of permitted range.\n- `TimeoutError` for timeouts.\n- `NetworkError` for generic connection or protocol related errors.\n- `SystemError` for generic platform errors, including reference errors.\n\nFurther errors may be defined in specific APIs.\n\nExamples:\n```\nvar error = new SecurityError(\"No permissions\");\n\nif ((error instanceof Error) && (error instanceof SecurityError)) {  // true\n  console.log(error.name);  // \"SecurityError\"\n  console.log(error.message);  // \"No permissions\"\n}\n```\n\n<a name=\"testing\"></a>\nTesting\n------------\nA test runner is provided in this repository. It is designed to launch a series of tests for each API specified here, each test in its own process. [test-runner.md](./test-runner.md) provides more details on launching tests.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/01org/iot-js-api.git"
  },
  "version": "1.0.0",
  "versions": {
    "ble": "1.0",
    "board": "1.0",
    "ocf": "oic1.1.0-0",
    "sensor": "1.0"
  }
}
